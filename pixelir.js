// Generated by CoffeeScript 2.2.2
//****************************************************************************
//****************************************************************************
//****************************************************************************

// PixelirJS core library - pixelir_core.coffee

// 2016.11.17 Created by PROJECT PROMINENCE

//****************************************************************************
//****************************************************************************
//****************************************************************************
var pixelir_core, pixelir_sprite;

pixelir_core = (function() {
  var RAD;

  class pixelir_core {
    constructor(arr) {
      var requestAnimationFrame;
      if (arr == null) {
        arr = [];
      }
      // requestAnimationFrame
      requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
      window.requestAnimationFrame = requestAnimationFrame;
      // get size
      this.BROWSER_WIDTH = window.innerWidth;
      this.BROWSER_HEIGHT = window.innerHeight;
      this.SCREEN_WIDTH = (arr['screen_width'] != null) ? arr['screen_width'] : this.BROWSER_WIDTH;
      this.SCREEN_HEIGHT = (arr['screen_height'] != null) ? arr['screen_height'] : this.BROWSER_HEIGHT;
      this.LAYERS = [];
      // sprite list init
      this.SPRITE_LIST = {};
      // Lapsed time init
      this.STARTTIME = new Date().getTime();
      this.LAPSEDTIME = 0.0;
      // set canvas parameter
      this.FPS = (arr['fps'] != null) ? arr['fps'] : 60;
      this.BG_COLOR = (arr['bg_color'] != null) ? arr['bg_color'] : "gray";
      this.STAGE_COLOR = (arr['stage_color'] != null) ? arr['stage_color'] : "black";
      // Collada Loader
      this.COLLADA_LOADER = new THREE.ColladaLoader();
      this.COLLADA_LOADER.options.convertUpAxis = true;
      // renderer initialize
      this.__initRenderer({
        bg_color: this.BG_COLOR
      });
    }

    //****************************************************************************
    //****************************************************************************
    //****************************************************************************

    // enterframe

    //****************************************************************************
    //****************************************************************************
    //****************************************************************************

    //****************************************************************************
    // enter frame process
    //****************************************************************************
    enterframe(func) {
      return this.__behavior(func);
    }

    //****************************************************************************
    // behavior process
    //****************************************************************************
    __behavior(func) {
      this.STATS.begin();
      // animation frame
      setTimeout(() => {
        var i, id, layer, len, ref, ref1, results, sprite;
        window.requestAnimationFrame(() => {
          return this.__behavior(func);
        });
        // Lapsed time
        this.LAPSEDTIME = new Date().getTime() - this.STARTTIME;
        // claer sreen
        this.RENDERER.clear();
        ref = this.SPRITE_LIST;
        // character draw
        for (id in ref) {
          sprite = ref[id];
          sprite.ys += sprite.gravity;
          sprite.x += sprite.xs;
          sprite.y += sprite.ys;
          sprite.z += sprite.zs;
          this.__drawSprite(sprite);
        }
        // character move
        func();
        // scene transport to screen
        this.RENDERER.clearDepth();
        this.RENDERER.render(this.LAYERS.background, this.CAMERA2D);
        this.RENDERER.clearDepth();
        this.RENDERER.render(this.LAYERS.layer3d, this.CAMERA3D);
        if (this.LAYERS.length > 0) {
          ref1 = this.LAYERS;
          results = [];
          for (i = 0, len = ref1.length; i < len; i++) {
            layer = ref1[i];
            this.RENDERER.clearDepth();
            results.push(this.RENDERER.render(layer, this.CAMERA2D));
          }
          return results;
        }
      }, this.FPSINTERVAL);
      return this.STATS.end();
    }

    //****************************************************************************
    //****************************************************************************
    //****************************************************************************

    // Sprite

    //****************************************************************************
    //****************************************************************************
    //****************************************************************************

    //========================================================================
    // addSprite
    //========================================================================
    addSprite(sprite, layer = "background") {
      var scene;
      switch (sprite.object.type) {
        case 'image':
          if (layer === "background") {
            scene = this.LAYERS.background;
          } else {
            if (layer >= this.LAYERS.length) {
              return;
            }
            scene = this.LAYERS[layer];
          }
          break;
        case 'collada':
        case 'primitive':
          scene = this.LAYERS.layer3d;
      }
      sprite.layer = layer;
      this.SPRITE_LIST[sprite.spriteID] = sprite;
      return scene.add(sprite.mesh);
    }

    //========================================================================
    // remove sprite
    //========================================================================
    removeSprite(sprite) {
      if ((this.SPRITE_LIST[sprite.spriteID] != null)) {
        return delete this.SPRITE_LIST[sprite.spriteID];
      }
    }

    //========================================================================
    // draw sprite
    //========================================================================
    __drawSprite(sprite) {
      var animelist, animetime, frameindex, nowepoch, patternlist, rot, rx, ry, rz, x, y, z;
      switch (sprite.object.type) {
        case 'image':
          x = parseInt(-(this.SCREEN_WIDTH / 2) + sprite.x);
          y = parseInt((this.SCREEN_HEIGHT / 2) - sprite.y);
          z = 0;
          patternlist = sprite.patternList[sprite.patternNum];
          animetime = patternlist[0];
          animelist = patternlist[1];
          if (animelist.length > 1) {
            nowepoch = new Date().getTime();
            frameindex = sprite.frameIndex;
            if (nowepoch > sprite.animetime + animetime) {
              sprite.animetime = new Date().getTime();
              frameindex++;
              if (frameindex >= animelist.length) {
                frameindex = 0;
              }
              sprite.frameIndex = frameindex;
              sprite.setCharacterPicture(frameindex);
            }
          }
          if (sprite.rotate < 0) {
            rot = 360 + (sprite.rotate % 360) * RAD;
          } else {
            rot = (sprite.rotate % 360.0) * RAD;
          }
          sprite.mesh.rotation.z = rot;
          break;
        case 'collada':
        case 'primitive':
          x = sprite.x;
          y = sprite.y;
          z = sprite.z;
          if ((sprite.xrotate != null)) {
            rx = (sprite.xrotate % 360.0) * RAD;
            sprite.mesh.rotation.x = rx;
          }
          if ((sprite.yrotate != null)) {
            ry = (sprite.yrotate % 360.0) * RAD;
            sprite.mesh.rotation.y = ry;
          }
          if ((sprite.zrotate != null)) {
            rz = (sprite.zrotate % 360.0) * RAD;
            sprite.mesh.rotation.z = rz;
          }
      }
      return sprite.mesh.position.set(x, y, z);
    }

    //========================================================================
    // Object data preload
    //========================================================================
    __loadObjects(assets_list, func) {
      var img, list, name, src;
      list = assets_list.shift(1);
      name = list[0];
      src = list[1];
      if (src.match(/(\.png|\.jpg)$/)) {
        img = new Image();
        img.src = src;
        return img.onload = () => {
          this.ASSETS[name] = {
            type: 'image',
            object: img
          };
          if (assets_list.length > 0) {
            return this.__loadObjects(assets_list, func);
          } else {
            return func(this.ASSETS);
          }
        };
      } else if (src.match(/\.dae$/)) {
        return this.COLLADA_LOADER.load(src, (model) => {
          var scene;
          scene = model.scene;
          this.ASSETS[name] = {
            type: 'collada',
            object: scene
          };
          if (assets_list.length > 0) {
            return this.__loadObjects(assets_list, func);
          } else {
            return func(this.ASSETS);
          }
        });
      } else {
        return func(this.ASSETS);
      }
    }

    //========================================================================
    // preload media file
    //========================================================================
    preload(resources, func) {
      var assets_list;
      if (resources == null) {
        return void 0;
      }
      this.ASSETS = {};
      assets_list = resources.concat();
      return this.__loadObjects(assets_list, func);
    }

    //========================================================================
    // create new sprite
    //========================================================================
    newSprite(arr) {
      var color, frameIndex, gravity, height, hidden, id, match, object, orgscale, patternList, patternNum, rotate, sprite, width, x, xrotate, xs, xscale, xsegments, y, yrotate, ys, yscale, ysegments, z, zrotate, zs, zscale;
      x = (arr['x'] != null) ? arr['x'] : 0;
      y = (arr['y'] != null) ? arr['y'] : 0;
      z = (arr['z'] != null) ? arr['z'] : 0;
      xs = (arr['xs'] != null) ? arr['xs'] : 0;
      ys = (arr['ys'] != null) ? arr['ys'] : 0;
      zs = (arr['zs'] != null) ? arr['zs'] : 0;
      frameIndex = (arr['frameIndex'] != null) ? arr['frameIndex'] : 0;
      hidden = (arr['hidden'] != null) ? arr['hidden'] : false;
      object = (arr['object'] != null) ? arr['object'] : void 0;
      width = (arr['width'] != null) ? arr['width'] : 32;
      height = (arr['height'] != null) ? arr['height'] : 32;
      orgscale = (arr['orgscale'] != null) ? arr['orgscale'] : 1.0;
      rotate = (arr['rotate'] != null) ? arr['rotate'] : 0.0;
      xrotate = (arr['xrotate'] != null) ? arr['xrotate'] : void 0;
      yrotate = (arr['yrotate'] != null) ? arr['yrotate'] : void 0;
      zrotate = (arr['zrotate'] != null) ? arr['zrotate'] : void 0;
      xscale = (arr['xscale'] != null) ? arr['xscale'] : 1.0;
      yscale = (arr['yscale'] != null) ? arr['yscale'] : 1.0;
      zscale = (arr['zscale'] != null) ? arr['zscale'] : 1.0;
      xsegments = (arr['xsegments'] != null) ? arr['xsegments'] : 1;
      ysegments = (arr['ysegments'] != null) ? arr['ysegments'] : 1;
      color = (arr['color'] != null) ? arr['color'] : '0x000000';
      rotate = (arr['rotate'] != null) ? arr['rotate'] : 0.0;
      gravity = (arr['gravity'] != null) ? arr['gravity'] : 0.0;
      patternList = (arr['patternList'] != null) ? arr['patternList'] : [[100, [0]]];
      patternNum = (arr['patternNum'] != null) ? arr['patternNum'] : 0;
      if (typeof object === 'string') {
        match = object.match(/^primitive_(.*)$/);
        if ((match != null)) {
          object = {
            type: 'primitive',
            object: match[1],
            xsegments: xsegments,
            ysegments: ysegments,
            color: color
          };
        }
      }
      id = this.__getUniqueID();
      sprite = new pixelir_sprite({
        x: x,
        y: y,
        z: z,
        xs: xs,
        ys: ys,
        zs: zs,
        frameIndex: frameIndex,
        hidden: hidden,
        object: object,
        width: width,
        height: height,
        orgscale: orgscale,
        rotate: rotate,
        xrotate: xrotate,
        yrotate: yrotate,
        zrotate: zrotate,
        xscale: xscale,
        yscale: yscale,
        zscale: zscale,
        rotate: rotate,
        gravity: gravity,
        color: color,
        patternList: patternList,
        patternNum: patternNum,
        spriteID: id
      });
      return sprite;
    }

    //****************************************************************************
    //****************************************************************************
    //****************************************************************************

    // Layer

    //****************************************************************************
    //****************************************************************************
    //****************************************************************************

    //************************************************************************
    // create new layer
    //************************************************************************
    createLayer(arr = []) {
      var hidden, scene;
      hidden = (arr['hidden'] != null) ? arr['hidden'] : false;
      scene = new THREE.Scene();
      this.LAYERS.push(scene);
      return this.LAYERS.length - 1;
    }

    //************************************************************************
    // remove layer
    //************************************************************************
    removeLayer(num) {
      if (num < 0 || this.LAYERS.length <= num) {
        return;
      }
      return this.LAYERS.splice(num, 1);
    }

    //************************************************************************
    // clear layer
    //************************************************************************
    clearLayer(num) {}

    //************************************************************************
    // get unique ID
    //************************************************************************
    __getUniqueID() {
      var S4;
      S4 = function() {
        return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1).toString();
      };
      return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
    }

    //========================================================================
    // Webcanvas canvas init
    //========================================================================
    __initRenderer(arr = {}) {
      var _CANVAS_HEIGHT, _CANVAS_WIDTH, ambientlight, bg_color, body, diff_x, diff_y, directionallight, ratio;
      bg_color = (arr['bg_color'] != null) ? arr['bg_color'] : "gray";
      // set background color of BODY
      body = document.body;
      if ((bg_color != null)) {
        body.style.background = bg_color;
      }
      // set fullscreen
      ratio = this.SCREEN_WIDTH / this.SCREEN_HEIGHT;
      _CANVAS_WIDTH = this.BROWSER_WIDTH;
      _CANVAS_HEIGHT = this.BROWSER_WIDTH / ratio;
      diff_x = 0;
      diff_y = (this.BROWSER_HEIGHT - _CANVAS_HEIGHT) / 2;
      if (_CANVAS_HEIGHT > this.BROWSER_HEIGHT) {
        _CANVAS_WIDTH = this.BROWSER_HEIGHT * ratio;
        _CANVAS_HEIGHT = this.BROWSER_HEIGHT;
        diff_x = (this.BROWSER_WIDTH - _CANVAS_WIDTH) / 2;
        diff_y = 0;
      }
      // create base DIV
      this.BASE = document.createElement("div");
      this.BASE.style.position = "absolute";
      this.BASE.style.background = this.STAGE_COLOR;
      this.BASE.style.overflow = "hidden";
      this.BASE.style.width = _CANVAS_WIDTH + "px";
      this.BASE.style.height = _CANVAS_HEIGHT + "px";
      this.BASE.style.left = diff_x + "px";
      this.BASE.style.top = diff_y + "px";
      this.STATS = new Stats();
      this.STATS.showPanel(0);
      body = document.body;
      body.appendChild(this.BASE);
      body.appendChild(this.STATS.domElement);
      //============================================================================
      // renderer setup
      //============================================================================
      this.PIXELRATIO = window.devicePixelRatio ? window.devicePixelRatio : 1;
      if (this.__detector()) {
        this.RENDERER = new THREE.WebGLRenderer({
          alpha: true,
          antialias: true
        });
      } else {
        this.RENDERER = new THREE.CanvasRenderer({
          alpha: true,
          antialias: true
        });
      }
      //@RENDERER = new THREE.WebGLRenderer({alpha:true, antialias: true})
      this.RENDERER.autoClear = false;
      this.RENDERER.shadowMap.enabled = true;
      this.RENDERER.shadowMap.type = THREE.PCFSoftShadowMap;
      this.RENDERER.setClearColor(0x000000, 0);
      this.RENDERER.setSize(this.SCREEN_WIDTH, this.SCREEN_HEIGHT);
      this.RENDERER.setPixelRatio(this.PIXELRATIO);
      this.RENDERER.domElement.style.position = "absolute";
      this.RENDERER.domElement.style.width = "100%";
      this.RENDERER.domElement.style.height = "100%";
      this.RENDERER.domElement.style.left = "0px";
      this.RENDERER.domElement.style.top = "0px";
      this.BASE.appendChild(this.RENDERER.domElement);
      this.CAMERA2D = new THREE.OrthographicCamera(this.SCREEN_WIDTH / -2, this.SCREEN_WIDTH / 2, this.SCREEN_HEIGHT / 2, this.SCREEN_HEIGHT / -2, -10, 10);
      this.CAMERA2D.position.set(0, 0, 1);
      this.CAMERA3D = new THREE.PerspectiveCamera(90, this.SCREEN_WIDTH / this.SCREEN_HEIGHT, 1, 100000);
      this.CAMERA3D.position.set(0, 100, 100);
      this.CAMERA3D.lookAt(0, 0, 0);
      //============================================================================
      // 3D initialize
      //============================================================================
      ambientlight = new THREE.AmbientLight(0xffffff, 0.5);
      ambientlight.position.set(100000, 100000, 100000);
      directionallight = new THREE.DirectionalLight(0xffffff, 0.5);
      directionallight.position.set(100000, 100000, 100000);
      directionallight.shadow.mapSize.width = 512;
      directionallight.shadow.mapSize.height = 512;
      directionallight.shadow.camera.near = 0.5;
      directionallight.shadow.camera.far = 500;
      //spotlight = new THREE.SpotLight(0x33ccff)
      //spotlight.position.set(0, 1000, 1000)
      //spotlight.target.position.set(0, 0, 0)
      //spotlight.shadowCameraVisible = true
      this.LIGHTS = {
        ambient: ambientlight,
        directional: directionallight
      };
      //spotlight: spotlight
      this.LAYERS.layer3d = new THREE.Scene();
      this.LAYERS.layer3d.add(ambientlight);
      this.LAYERS.layer3d.add(directionallight);
      //@LAYERS.layer3d.add(spotlight)
      ambientlight.castShadow = true;
      directionallight.castShadow = true;
      //spotlight.castShadow = true
      return this.LAYERS.background = new THREE.Scene();
    }

    //============================================================================
    // WebGL detector
    //============================================================================
    __detector() {
      var canvas, e, ret, webGLContext;
      try {
        canvas = document.createElement('canvas');
        webGLContext = canvas.getContext("webgl") || canvas.getContext("experimental-webgl");
        ret = !!(window.WebGLRenderingContext && webGLContext && webGLContext.getShaderPrecisionFormat);
      } catch (error) {
        e = error;
        ret = false;
      }
      return ret;
    }

  };

  // public variables
  pixelir_core.ASSETS = void 0;

  pixelir_core.BROWSER_WIDTH = void 0;

  pixelir_core.BROWSER_HEIGHT = void 0;

  pixelir_core.SCREEN_WIDTH = void 0;

  pixelir_core.SCREEN_HEIGHT = void 0;

  pixelir_core.LAYERS = void 0;

  pixelir_core.LIGHTS = void 0;

  pixelir_core.STARTTIME = void 0;

  pixelir_core.LAPSEDTIME = void 0;

  pixelir_core.FPSAVR = void 0;

  pixelir_core.FPSINTERVAL = void 0;

  pixelir_core.FPS = void 0;

  pixelir_core.SPRITE_LIST = void 0;

  pixelir_core.BG_COLOR = void 0;

  pixelir_core.STAGE_COLOR = void 0;

  pixelir_core.BASE = void 0;

  pixelir_core.RENDERER = void 0;

  pixelir_core.CAMERA2D = void 0;

  pixelir_core.CAMERA3D = void 0;

  pixelir_core.STATS = void 0;

  pixelir_core.PIXELRATIO = void 0;

  pixelir_core.COLLADA_LOADER = void 0;

  // private variable
  RAD = Math.PI / 180.0;

  return pixelir_core;

}).call(this);

pixelir_sprite = (function() {
  var RAD;

  //****************************************************************************
  //****************************************************************************
  //****************************************************************************

  // PixelirJS Sprite Library - pixelir_sprite.coffee

  // 2016.11.17 Created by PROJECT PROMINENCE

  //****************************************************************************
  //****************************************************************************
  //****************************************************************************
  class pixelir_sprite {
    constructor(arr) {
      var hnum, image, index, material, num, pattern, sphnum, spwnum, startx, starty, type, wnum;
      this.x = (arr['x'] != null) ? arr['x'] : 0;
      this.y = (arr['y'] != null) ? arr['y'] : 0;
      this.z = (arr['z'] != null) ? arr['z'] : 0;
      this.xs = (arr['xs'] != null) ? arr['xs'] : 0;
      this.ys = (arr['ys'] != null) ? arr['ys'] : 0;
      this.zs = (arr['zs'] != null) ? arr['zs'] : 0;
      this.gravity = (arr['gravity'] != null) ? arr['gravity'] : 0;
      this.frameIndex = (arr['frameIndex'] != null) ? arr['frameIndex'] : 0;
      this.hidden = (arr['hidden'] != null) ? arr['hidden'] : false;
      this.object = (arr['object'] != null) ? arr['object'] : void 0;
      this.width = (arr['width'] != null) ? arr['width'] : 32;
      this.height = (arr['height'] != null) ? arr['height'] : 32;
      this.orgscale = (arr['orgscale'] != null) ? arr['orgscale'] : 1.0;
      this.xscale = (arr['xscale'] != null) ? arr['xscale'] : 1.0;
      this.yscale = (arr['yscale'] != null) ? arr['yscale'] : 1.0;
      this.zscale = (arr['zscale'] != null) ? arr['zscale'] : 1.0;
      this.rotate = (arr['rotate'] != null) ? arr['rotate'] : 0.0;
      this.xrotate = (arr['xrotate'] != null) ? arr['xrotate'] : void 0;
      this.yrotate = (arr['yrotate'] != null) ? arr['yrotate'] : void 0;
      this.zrotate = (arr['zrotate'] != null) ? arr['zrotate'] : void 0;
      this.xsegments = (arr['xsegments'] != null) ? arr['xsegments'] : 1;
      this.ysegments = (arr['ysegments'] != null) ? arr['ysegments'] : 1;
      this.color = (arr['color'] != null) ? arr['color'] : '0x000000';
      this.patternList = (arr['patternList'] != null) ? arr['patternList'] : [[100, [0]]];
      this.patternNum = (arr['patternNum'] != null) ? arr['patternNum'] : 0;
      this.spriteID = (arr['spriteID'] != null) ? arr['spriteID'] : void 0;
      switch (this.object.type) {
        //========================================================================
        // 画像
        //========================================================================
        case 'image':
          image = this.object.object;
          // texture width
          this.objectwidth = image.width;
          // texture height
          this.objectheight = image.height;
          this.animetime = new Date().getTime();
          spwnum = Math.floor(this.objectwidth / this.width);
          sphnum = Math.floor(this.objectheight / this.height);
          this.maxFrame = (spwnum * sphnum) - 1;
          this.canvas = document.createElement("canvas");
          this.canvas.width = this.objectwidth;
          this.canvas.height = this.objectheight;
          pattern = this.patternList[this.patternNum][1];
          index = pattern[this.frameIndex];
          wnum = Math.floor(this.objectwidth / this.width);
          hnum = Math.floor(this.objectheight / this.height);
          if (index > this.maxFrame) {
            num = index % this.maxFrame;
          }
          startx = (index % wnum) * this.width;
          starty = ((hnum - (Math.floor(index / wnum))) - 1) * this.height;
          this.context = this.canvas.getContext("2d");
          this.context.drawImage(image, 0, 0, this.objectwidth, this.objectheight, 0, 0, this.objectwidth, this.objectheight);
          this.texture = new THREE.CanvasTexture(this.canvas);
          this.texture.minFilter = THREE.LinearFilter;
          this.texture.repeat.set(this.width / this.objectwidth, this.height / this.objectheight);
          this.texture.offset.x = startx / this.objectwidth;
          this.texture.offset.y = starty / this.objectheight;
          this.geometry = new THREE.PlaneGeometry(this.width * this.orgscale * this.xscale, this.height * this.orgscale * this.yscale);
          material = new THREE.MeshBasicMaterial({
            map: this.texture,
            transparent: true
          });
          this.mesh = new THREE.Mesh(this.geometry, material);
          this.mesh.rotation.z = this.rotate * RAD;
          this.texture.needsUpdate = true;
          break;
        //========================================================================
        // primitive
        //========================================================================
        case 'primitive':
          type = this.object.object;
          switch (type) {
            case 'plane':
              this.geometry = new THREE.PlaneGeometry(this.width * this.orgscale * this.xscale, this.height * this.orgscale * this.yscale, this.xsegments, this.ysegments);
              //material = new THREE.MeshPhongMaterial
              material = new THREE.MeshLambertMaterial({
                color: parseInt(this.color, 16),
                specular: 0x999999,
                shininess: 60,
                side: THREE.DoubleSide,
                transparent: true
              });
              this.mesh = new THREE.Mesh(this.geometry, material);
              this.mesh.castShadow = true;
              this.mesh.receiveShadow = true;
              this.mesh.position.set(this.x, this.y, this.z);
              if ((this.xrotate != null)) {
                this.mesh.rotation.x = this.xrotate * RAD;
              }
              if ((this.yrotate != null)) {
                this.mesh.rotation.y = this.yrotate * RAD;
              }
              if ((this.zrotate != null)) {
                this.mesh.rotation.z = this.zrotate * RAD;
              }
              break;
            case 'cube':
              this.geometry = new THREE.BoxGeometry(this.orgscale * this.xscale, this.orgscale * this.yscale, this.orgscale * this.zscale);
              material = new THREE.MeshLambertMaterial({
                color: parseInt(this.color, 16),
                transparent: true
              });
              this.mesh = new THREE.Mesh(this.geometry, material);
              this.mesh.castShadow = true;
              this.mesh.receiveShadow = true;
              this.mesh.position.set(this.x, this.y, this.z);
              if ((this.xrotate != null)) {
                this.mesh.rotation.x = this.xrotate * RAD;
              }
              if ((this.yrotate != null)) {
                this.mesh.rotation.y = this.yrotate * RAD;
              }
              if ((this.zrotate != null)) {
                this.mesh.rotation.z = this.zrotate * RAD;
              }
          }
          break;
        //========================================================================
        // Collada
        //========================================================================
        case 'collada':
          this.gravity *= -1;
          this.mesh = this.object.object.clone();
          this.mesh.castShadow = true;
          this.mesh.receiveShadow = true;
          this.mesh.position.set(this.x, this.y, this.z);
          this.mesh.scale.set(this.xscale * this.orgscale, this.yscale * this.orgscale, this.zscale * this.orgscale);
          if ((this.xrotate != null)) {
            this.mesh.rotation.x = this.xrotate * RAD;
          }
          if ((this.yrotate != null)) {
            this.mesh.rotation.y = this.yrotate * RAD;
          }
          if ((this.zrotate != null)) {
            this.mesh.rotation.z = this.zrotate * RAD;
          }
      }
    }

    setCharacterPicture(frameIndex1) {
      var hnum, index, num, pattern, startx, starty, wnum;
      this.frameIndex = frameIndex1;
      pattern = this.patternList[this.patternNum][1];
      index = pattern[this.frameIndex];
      wnum = Math.floor(this.objectwidth / this.width);
      hnum = Math.floor(this.objectheight / this.height);
      if (index > this.maxFrame) {
        num = index % this.maxFrame;
      }
      startx = (index % wnum) * this.width;
      starty = (((hnum - (Math.floor(index / wnum))) - 1) * this.height) - 1;
      this.texture.offset.x = startx / this.objectwidth;
      return this.texture.offset.y = starty / this.objectheight;
    }

  };

  // public variables
  pixelir_sprite.x = void 0;

  pixelir_sprite.y = void 0;

  pixelir_sprite.z = void 0;

  pixelir_sprite.frameIndex = void 0;

  pixelir_sprite.hidden = void 0;

  pixelir_sprite.object = void 0;

  pixelir_sprite.width = void 0;

  pixelir_sprite.height = void 0;

  pixelir_sprite.scalew = void 0;

  pixelir_sprite.scaleh = void 0;

  pixelir_sprite.maxFrame = void 0;

  pixelir_sprite.rotate = void 0;

  pixelir_sprite.layer = void 0;

  pixelir_sprite.spriteID = void 0;

  pixelir_sprite.patternList = void 0;

  pixelir_sprite.patternNum = void 0;

  pixelir_sprite.animetime = void 0;

  pixelir_sprite.mesh = void 0;

  pixelir_sprite.objectwidth = void 0;

  pixelir_sprite.objectheight = void 0;

  pixelir_sprite.canvas = void 0;

  pixelir_sprite.context = void 0;

  pixelir_sprite.texture = void 0;

  pixelir_sprite.geometroy = void 0;

  // private variable
  RAD = Math.PI / 180.0;

  return pixelir_sprite;

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=coffeescript
